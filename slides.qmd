---
title: "Visual methods for multivariate data - a journey beyond 3D"
author: "Professor Di Cook <br> Monash University <br><br>  @visnut@aus.social"
format: 
  revealjs:
    multiplex: true
    footer: "[https://github.com/dicook/MDAG_2022](https://github.com/dicook/MDAG_2022)"
    theme: ["serif", "mystyle.scss"]
    slide-number: c/t
    incremental: false
    title-slide-attributes:
      data-background-image: img/title_bg.png
      data-background-size: 90%  
      data-background-position: 30% 45%  
---

```{r setup}
#| include: false

library(knitr)
options(htmltools.dir.version = FALSE, tibble.width = 45)
opts_chunk$set(
  echo = FALSE, 
  warning = FALSE, 
  message = FALSE, 
  error=FALSE, 
  comment = "#>",
  fig.align = 'center', 
  fig.width = 12, 
  fig.height = 11, 
  fig.show = 'hold', 
  fig.retina = 5,
  cache = FALSE
)

# Printing
options(digits=2, width=120)

# libraries
library(tidyverse)
library(ggthemes)

# for fonts
library(showtext)
font_add_google("Noto Sans", "Noto Sans")
showtext_auto()
theme_set(theme_minimal(base_family = "Noto Sans") +
  theme(axis.line = element_line(colour = "black", size=0.2),
        panel.border = element_rect(
          colour = "black", fill = NA, size=0.5)))
# Set colour palette to brewer::Dark2
```

## Outline

::: {.column width="45%"}
- <strong style="color: #aec7b2"> Session 1: Introduction to tours </strong>
  - Getting started: package installs
  - What is multivariate data?
  - Where does the tour fit into range of methods
  - What is a tour?
  - Different types of tours
  - Interpreting what you see
  - Saving your tour plot
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

- <strong style="color: #aec7b2"> Session 2: Combining tours with models </strong>
  - Model in the data space philosophy
  - Comparison to non-linear dimension reduction: liminal
  - Utilising random forest diagnostics 
  - Dendrograms in the data space
  - Understanding local explanations 
:::

## Getting set up

::: {.columns}

::: {.column width="45%"}

```{r eval=FALSE, echo=TRUE}
# Install from CRAN
install.packages(c("tourr", 
                   "geozoo", 
                   "spinifex", 
                   "liminal",
                   "tidyverse",
                   "palmerpenguins",
                   "RColorBrewer"))
# Getting help                 
help(package="tourr")
```

`tourr`: Implements geodesic interpolation and basis
    generation functions that allow you to create new tour
    methods from R.
    

:::

::: {.column width="5%"}
:::

::: {.column width="50%"}


`geozoo`: Geometric objects defined in 'geozoo' can be simulated or displayed in the R package 'tourr'.

`spinifex`: Implements  manual control, where the contribution of a selected variable can be adjusted between -1 to 1, to examine the sensitivity of structure in the data to that variable.

`liminal`: A special purpose package to compare the views of the data provided by non-linear dimension with tSNE and a tour. 

:::
:::


##

Grab the `slides.R` file from [https://github.com/dicook/MDAG_2022](https://github.com/dicook/MDAG_2022)

My version of R, and installed packages is:

```{r}
sessionInfo()
```




## Load the penguins data {background-image="https://allisonhorst.github.io/palmerpenguins/logo.png" background-size="100px" background-position="96% 1%"}



```{r runthis5, echo=TRUE}
library(tidyverse)
library(palmerpenguins)
penguins <- penguins %>% filter(!is.na(bill_length_mm)) 
penguins_sub <- penguins[,c(1, 3:6)] %>% 
  mutate(across(where(is.numeric),  ~ scale(.)[,1])) %>%
  rename(bl = bill_length_mm,
         bd = bill_depth_mm,
         fl = flipper_length_mm,
         bm = body_mass_g)
summary(penguins_sub)
```

See [Allison Horst's web site](https://allisonhorst.github.io/palmerpenguins/) for more details.

## About the penguins data 

<table>
<tr> <td width="40%"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Adélie_Penguin.jpg/320px-Adélie_Penguin.jpg" width="100%" /> </td> <td width="30%"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Pygoscelis_papua_-Jougla_Point%2C_Wiencke_Island%2C_Palmer_Archipelago_-adults_and_chicks-8.jpg/273px-Pygoscelis_papua_-Jougla_Point%2C_Wiencke_Island%2C_Palmer_Archipelago_-adults_and_chicks-8.jpg" width="100%" /> </td> <td width="30%"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/A_chinstrap_penguin_%28Pygoscelis_antarcticus%29_on_Deception_Island_in_Antarctica.jpg/201px-A_chinstrap_penguin_%28Pygoscelis_antarcticus%29_on_Deception_Island_in_Antarctica.jpg" width="90%" /> </td> </tr>
<tr> <td> Adélie ^[[Wikimedia Commons](https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Adélie_Penguin.jpg/320px-Adélie_Penguin.jpg)]  </td> <td> Gentoo ^[[Wikimedia Commons](https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Pygoscelis_papua_-Jougla_Point%2C_Wiencke_Island%2C_Palmer_Archipelago_-adults_and_chicks-8.jpg/273px-Pygoscelis_papua_-Jougla_Point%2C_Wiencke_Island%2C_Palmer_Archipelago_-adults_and_chicks-8.jpg)] </td> 
<td> Chinstrap ^[[Wikimedia Commons](https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/A_chinstrap_penguin_%28Pygoscelis_antarcticus%29_on_Deception_Island_in_Antarctica.jpg/201px-A_chinstrap_penguin_%28Pygoscelis_antarcticus%29_on_Deception_Island_in_Antarctica.jpg)]</td> </tr>
</table>

## Simple scatterplot

::: {.columns}
::: {.column width="50%"}

```{r echo=TRUE, eval=FALSE}
ggplot(penguins_sub, 
   aes(x=fl, 
       y=bm,
       colour=species,
       shape=species)) +
  geom_point(alpha=0.7, 
             size=2) +
  scale_colour_brewer("",
    palette="Dark2") + 
  theme(aspect.ratio=1,
  legend.position="bottom")
```
:::


::: {.column width="50%"}


```{r runthis6, fig.width=5, fig.height=5, out.width="100%"}
ggplot(penguins_sub, 
   aes(x=fl, 
       y=bm, 
       colour=species,
       shape=species)) +
  geom_point(alpha=0.7, 
             size=2) +
  scale_colour_brewer("",
    palette="Dark2") + 
  theme(aspect.ratio=1,
  legend.position="bottom")
```
:::
:::

## Our first tour

::: {.columns}
::: {.column width="50%"}

```{r runthis7, echo=TRUE, eval=FALSE}
library(RColorBrewer)
clrs <- brewer.pal(3, "Dark2")
col <- clrs[
  as.numeric(
    penguins_sub$species)]
animate_xy(penguins_sub[,2:5], 
           col=col, 
           axes="off", 
           fps=15)
```

:::



::: {.column width="50%"}

```{r eval=FALSE}
library(RColorBrewer)
set.seed(20200622)
clrs <- brewer.pal(3, "Dark2")
col <- clrs[as.numeric(penguins_sub$species)]
render_gif(penguins_sub[,2:5], grand_tour(), 
           display_xy(col=col, axes="bottomleft"), 
           "penguins2d.gif", apf=1/5, 
           frames=100, width=300, height=300)
```

<img src="penguins2d.gif" width="100%"> 

:::
:::

## What did you see?

- clusters `r emo::ji("white_check_mark")`
- outliers `r emo::ji("white_check_mark")`
- linear dependence `r emo::ji("white_check_mark")`
- elliptical clusters with slightly different shapes `r emo::ji("white_check_mark")`
- separated elliptical clusters with slightly different shapes `r emo::ji("white_check_mark")`

## Movement patterns

::: {.column width="40%"}
Movement of points provide additional information about structure in high-dimensions.
:::
::: {.column width="5%"}
:::

::: {.column width="50%"}
<img src="img/tour_movements.png" width="100%"> 
:::

## Reading axes - interpretation

Length and direction of axes relative to the  pattern of interest

::: {.column width="45%"}

<img src="img/reading_axes1.png" width="100%"> 

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

```{r fig.width=4, fig.height=4, out.width="100%"}
ggplot(penguins_sub, aes(x=bl, y=bd, colour=species)) +
  geom_point() +
  scale_colour_brewer("", palette="Dark2") +
  theme(aspect.ratio=1)
```

:::

## Reading axes - interpretation

Length and direction of axes relative to the  pattern of interest

::: {.column width="45%"}

<img src="img/reading_axes2.png" width="100%"> 
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

```{r fig.width=4, fig.height=4, out.width="100%"}
ggplot(penguins_sub, aes(x=bd, y=bm, colour=species)) +
  geom_point() +
  scale_colour_brewer("", palette="Dark2") +
  theme(aspect.ratio=1)
```

:::


## What is a tour?

::: {.columns}
::: {.column width="50%"}

A grand tour is by definition a movie of low-dimensional projections constructed in such a way that it comes arbitrarily close to showing all possible low-dimensional projections; in other words, a grand tour is a space-filling curve in the manifold of low-dimensional projections of high-dimensional data spaces.
:::

::: {.column width="50%"}

${\mathbf x}_i \in \mathcal{R}^p$, $i^{th}$ data vector

$F$ is a $p\times d$ orthonormal basis, $F'F=I_d$, where $d$ is the projection dimension.

The projection of ${\mathbf x_i}$ onto $F$ is ${\mathbf y}_i=F'{\mathbf x}_i$.

Tour is indexed by time, $F(t)$, where $t\in [a, z]$. Starting and target frame denoted as $F_a = F(a), F_z=F(t)$.

The animation of the projected data is given by a path ${\mathbf y}_i(t)=F'(t){\mathbf x}_i$.

:::
:::

## Geodesic interpolation between planes

::: {.columns}
::: {.column width="50%"}

Tour is indexed by time, $F(t)$, where $t\in [a, z]$. Starting and target frame denoted as $F_a = F(a), F_z=F(t)$.

The animation of the projected data is given by a path ${\mathbf y}_i(t)=F'(t){\mathbf x}_i$.

:::

::: {.column width="50%"}


<img src="img/geodesic.png" width="120%">

:::
:::


## Understanding the projections 

```{r understanding, eval=FALSE}
# Generate a plotly animation to demonstrate
library(plotly)
library(htmltools)

# Generate sequence of bases
# set.seed(3)
set.seed(4)
random_start <- basis_random(4)
bases <- save_history(penguins_sub[,3:6], grand_tour(2), 
    start=random_start, max = 5)
bases[,,1] <- random_start # something needs fixing
tour_path <- interpolate(bases, 0.1)
d <- dim(tour_path)

# Make really big data of all projections
penguins_d <- NULL; penguins_axes <- NULL
for (i in 1:d[3]) {
  fp <- as.matrix(penguins_sub[,2:5]) %*% 
    matrix(tour_path[,,i], ncol=d[2])
  fp <- tourr::center(fp)
  colnames(fp) <- c("d1", "d2")
  penguins_d <- rbind(penguins_d, cbind(fp, rep(i+10, nrow(fp))))
  fa <- cbind(matrix(0, d[1], d[2]), 
              matrix(tour_path[,,i], ncol=d[2]))
  colnames(fa) <- c("origin1", "origin2", "d1", "d2") 
  penguins_axes <- rbind(penguins_axes, 
                         cbind(fa, rep(i+10, nrow(fa))))
}
colnames(penguins_d)[3] <- "indx"
colnames(penguins_axes)[5] <- "indx"

df <- as_tibble(penguins_d) %>% 
  mutate(species = rep(penguins_sub$species, d[3]))
dfaxes <- as_tibble(penguins_axes) %>%
  mutate(labels=rep(colnames(penguins_sub[,2:5]), d[3]))
dfaxes_mat <- dfaxes %>%
  mutate(xloc = rep(max(df$d1)+1, d[3]*d[1]), 
         yloc=rep(seq(-1.2, 1.2, 0.8), d[3]), 
         coef=paste(round(dfaxes$d1, 2), ", ", 
                    round(dfaxes$d2, 2)))
p <- ggplot() +
       geom_segment(data=dfaxes, 
                    aes(x=d1*2-5, xend=origin1-5, 
                        y=d2*2, yend=origin2, 
                        frame = indx), colour="grey70") +
       geom_text(data=dfaxes, aes(x=d1*2-5, y=d2*2, label=labels, 
                                  frame = indx), colour="grey70") +
       geom_point(data = df, aes(x = d1, y = d2, colour=species, 
                                 frame = indx), size=1) +
       scale_colour_brewer("", palette="Dark2") +
       geom_text(data=dfaxes_mat, aes(x=xloc, y=yloc, 
                                  label=coef, frame = indx)) + 
       theme_void() +
       coord_fixed() +
  theme(legend.position="none")
pg <- ggplotly(p, width=700, height=400) %>%
  animation_opts(200, redraw = FALSE, 
                 easing = "linear", transition=0)
save_html(pg, file="penguins_manual_demo.html")
```

<center>
<iframe src="penguins_manual_demo.html" width="800" height="500" scrolling="yes" seamless="seamless" frameBorder="0"> </iframe>
</center>

## 

<br><br><br><br><br>
Let's take a look at some common high-d shapes with a grand tour

## 4D spheres

::: {.columns}
::: {.column width="50%"}


```{r runthis8, eval=FALSE}
sphere1 <- sphere.hollow(p=4)$points %>% as_tibble()
animate_xy(sphere1, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(sphere1, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "sphere4d_1.gif", frames=100, width=400, height=400)
```


Hollow

<img src="sphere4d_1.gif" width="70%">
:::

::: {.column width="50%"}


```{r runthis9, eval=FALSE}
sphere2 <- sphere.solid.random(p=4)$points %>% as_tibble()
animate_xy(sphere2, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(sphere2, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "sphere4d_2.gif", frames=100, width=400, height=400)
```



Solid

<img src="sphere4d_2.gif" width="70%">

:::
:::

## 4D cubes

::: {.columns}
::: {.column width="50%"}


```{r runthis10, eval=FALSE}
cube1 <- cube.face(p=4)$points %>% as_tibble()
animate_xy(cube1, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(cube1, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "cube4d_1.gif", frames=100, width=400, height=400)
```


Hollow

<img src="cube4d_1.gif" width="70%">
:::

::: {.column width="50%"}




```{r runthis11, eval=FALSE}
cube2 <- cube.solid.random(p=4)$points %>% as_tibble()
animate_xy(cube2, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(cube2, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "cube4d_2.gif", frames=100, width=400, height=400)

```


Solid

<img src="cube4d_2.gif" width="70%">

:::
:::

## Others

::: {.columns}
::: {.column width="50%"}


```{r runthis12, eval=FALSE}
torus <- torus(p = 4, n = 5000, radius=c(8, 4, 1))$points %>% as_tibble()
animate_xy(torus, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(torus, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "torus4d.gif", frames=100, width=400, height=400)
```


Torus

<img src="torus4d.gif" width="70%">
:::

::: {.column width="50%"}



```{r runthis13, eval=FALSE}
mobius <- mobius()$points %>% as_tibble()
animate_xy(mobius, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(mobius, grand_tour(), 
           display_xy(axes="bottomleft"), 
           "mobius.gif", frames=100, width=400, height=400)
```



Mobius

<img src="mobius.gif" width="70%">

:::
:::

## Path on the space of all projections

A grand tour is like a random walk (with interpolation) through the space of all possible projections: sphere for 1D, torus for 2D.^[[Zhang et al (2021)](https://journal.r-project.org/articles/RJ-2021-105/)]


::: {.columns}
::: {.column width="50%"}

```{r eval=FALSE}
set.seed(1000)
sphere1 <- sphere.hollow(p=4)$points %>% as_tibble()
sphere1$group <- "sphere"
t2 <- save_history(penguins_sub[,2:5], grand_tour(1), 
  max = 20)
t2_interp <- tourr::interpolate(t2)
t2_interp_m <- apply(t2_interp, c(3,1), c) %>% as_tibble()
t2_interp_m$group <- "path"
tour_path_1d <- bind_rows(sphere1, t2_interp_m)
t_pch <- c(rep(16, nrow(sphere1)), rep(16, nrow(t2_interp_m)))
t_col <- c(rep("grey70", nrow(sphere1)), rep("orange", nrow(t2_interp_m)))
t_cex <- c(rep(1, nrow(sphere1)), rep(2, nrow(t2_interp_m)))
render_gif(tour_path_1d[,1:4], grand_tour(), display_xy(pch=t_pch, col=t_col, cex=t_cex, axes="off", half_range=0.6), gif_file="tour_path.gif", apf=1/5)
```
<img src="tour_path.gif" width="80%">

:::

::: {.column width="50%"}


<img src="tour_path_2d.gif" width="80%">

:::
:::


## Other tour types

- <strong style="color: #aec7b2"> guided</strong>: follows the optimisation path for a projection pursuit index.
- <strong style="color: #aec7b2"> little</strong>: interpolates between all variables. 
- <strong style="color: #aec7b2"> local</strong>: rocks back and forth from a given projection, so shows all possible projections within a radius.
- <strong style="color: #aec7b2"> dependence</strong>: two independent 1D tours
- <strong style="color: #aec7b2"> frozen</strong>: fixes some variable coefficients, others vary freely. 
- <strong style="color: #aec7b2"> manual/radial</strong>: control coefficient of one variable, to examine the sensitivity of structure this variable. (See `spinifex` package).
- <strong style="color: #aec7b2"> slice</strong>: use a section instead of a projection.
- <strong style="color: #aec7b2"> pca</strong>: tour on $k$ principal components, but show original variable axes. High-d biplots.

## Guided tour 

New target bases are chosen using a projection pursuit index function

$$\mathop{\text{maximize}}_{F} g(F'x) ~~~\text{ subject to }
F \text{ being orthonormal}$$

- `holes`: This is an inverse Gaussian filter, which is optimised when there is not much data in the center of the projection, i.e. a "hole" or donut shape in 2D.
- `central mass`: The opposite of holes, high density in the centre of the projection, and often "outliers" on the edges. 
- `LDA`/`PDA`: An index based on the linear discriminant dimension reduction (and penalised), optimised by projections where the named classes are most separated.


##

```{r eval=FALSE}
clrs <- brewer.pal(3, "Dark2")
col <- clrs[
  as.numeric(
    penguins_sub$species)]
set.seed(2022)
render_gif(penguins_sub[,2:5], guided_tour(lda_pp(penguins_sub$species)), 
           display_xy(col=col, axes="bottomleft"), 
           "penguins2d_guided.gif", 
           frames=100, width=300, height=300, loop=FALSE)
```

```{r runthis16, eval=FALSE}
animate_xy(penguins_sub[,2:5], grand_tour(),
           axes = "bottomleft", col=col)
set.seed(2022)
pp <- animate_xy(penguins_sub[,2:5],
           guided_tour(lda_pp(penguins_sub$species)),
           axes = "bottomleft", col=col)
best_proj <- pp$basis[length(pp$basis)][[1]] # Save the final projection
```

::: {.columns}
::: {.column width="50%"}

Grand

<img src="penguins2d.gif" width="80%">


Might accidentally see best separation

:::

::: {.column width="50%"}


Guided, using LDA index

<img src="penguins2d_guided.gif" width="80%">


Moves to the best separation

:::
:::


## Manual tour

```{r eval=FALSE}
clrs <- brewer.pal(3, "Dark2")
col <- clrs[as.numeric(penguins_sub$species)]
render_gif(data=penguins_sub[,2:5],
           tour_path = radial_tour(as.matrix(best_proj), mvar = 2),
           display = display_xy(col = col),
           gif_file = "penguins_rt_bd.gif",
           apf = 1/20, 
           frames = 100, 
           width = 300, height = 300)

render_gif(data=penguins_sub[,2:5],
           tour_path = radial_tour(as.matrix(best_proj), mvar = 1),
           display = display_xy(col = col),
           gif_file = "penguins_rt_bl.gif",
           apf = 1/20, 
           frames = 100, 
           width = 300, height = 300)

render_gif(data=penguins_sub[,2:5],
           tour_path = radial_tour(as.matrix(best_proj), mvar = 3),
           display = display_xy(col = col),
           gif_file = "penguins_rt_fl.gif",
           apf = 1/20, 
           frames = 100, 
           width = 300, height = 300)

render_gif(data=penguins_sub[,2:5],
           tour_path = radial_tour(as.matrix(best_proj), mvar = 4),
           display = display_xy(col = col),
           gif_file = "penguins_rt_bm.gif",
           apf = 1/20, 
           frames = 100, 
           width = 300, height = 300)

```

```{r runthis100, eval=FALSE}
clrs <- brewer.pal(3, "Dark2")
col <- clrs[as.numeric(penguins_sub$species)]
# Check contribution of bl, change mvar to switch variables
animate_xy(penguins_sub[,2:5], 
           radial_tour(as.matrix(best_proj), mvar = 2),
           col = col)
```

::: {.columns}
::: {.column width="50%"}


- start from best projection, given by projection pursuit
- bd contribution controlled
- if bd is removed from projection, Gentoo separation disappears
- bd is important for distinguishing Gentoo

:::


::: {.column width="50%"}


<img src="penguins_rt_bd.gif" width="90%">

:::
:::

## Manual tour

::: {.columns}
::: {.column width="50%"}


- start from best projection, given by projection pursuit
- bl contribution controlled
- bl is important for distinguishing Adelie from Chinstrap

:::


::: {.column width="50%"}


<img src="penguins_rt_bl.gif" width="90%">

:::
:::

## Local tour

```{r eval=FALSE}
render_gif(penguins_sub[,2:5], local_tour(start=best_proj, 0.9), 
           display_xy(col=col, axes="bottomleft"), 
           "penguins2d_local.gif", 
           frames=200, width=300, height=300)
```

```{r runthis17, eval=FALSE}
animate_xy(penguins_sub[,2:5], local_tour(start=best_proj, 0.9),
           axes = "bottomleft", col=col)
```

::: {.columns}
::: {.column width="50%"}

Rocks from and to a given projection, in order to observe the neighbourhood

:::

::: {.column width="50%"}

<img src="penguins2d_local.gif" width="90%">

:::
:::

## Slice tour

::: {.column width="45%"}

Projections

<img src="sphere4d_1.gif" width="70%">

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}


```{r runthis80, eval=FALSE}
sphere1 <- sphere.hollow(p=4)$points %>% as_tibble()
animate_slice(sphere1, axes="bottomleft", half_range=0.6)
```

```{r eval=FALSE}
render_gif(sphere1, grand_tour(), 
           display_slice(axes="bottomleft", half_range=0.6), 
           "sphere4d_slice.gif", frames=100, width=400, height=400)
```


Sections

<img src="sphere4d_slice.gif" width="70%">
:::

## Geometric shapes with slice tour

::: {.column width="45%"}

```{r runthis120, eval=FALSE}
torus <- torus(p = 4, n = 5000, radius=c(8, 4, 1))$points %>% as_tibble()
animate_slice(torus, axes="bottomleft", half_range=0.8)
```

```{r eval=FALSE}
render_gif(torus, grand_tour(), 
           display_slice(axes="bottomleft", half_range=0.8), 
           "torus4d_slice.gif", frames=100, width=400, height=400)
```

Torus

<img src="torus4d_slice.gif" width="70%">

:::

::: {.column width="5%"}

:::

::: {.column width="45%"}


```{r runthis1000, eval=FALSE}
cube1 <- cube.face(p=4)$points %>% as_tibble()
# Slicing needs data to be on a standard scale
cube1_std <- cube1 %>% 
  mutate(across(where(is.numeric),  ~ scale(.)[,1]))
animate_slice(cube1_std, axes="bottomleft")
```

```{r eval=FALSE}
render_gif(cube1_std, grand_tour(), 
           display_slice(axes="bottomleft"), 
           "cube4d_slice.gif", frames=100, width=400, height=400)
```


Cube

<img src="cube4d_slice.gif" width="70%">

:::

## PCA tour

::: {.column width="45%"}

Compute PCA, reduce dimension, show original variable axes in the reduced space.

```{r runthis123, eval=FALSE, echo=TRUE}
penguins_pca <- prcomp(penguins_sub[,2:5], center = FALSE)
penguins_coefs <- penguins_pca$rotation[, 1:3]
penguins_scores <- penguins_pca$x[, 1:3]
clrs <- brewer.pal(3, "Dark2")
col <- clrs[
  as.numeric(
    penguins_sub$species)]
animate_pca(penguins_scores, pc_coefs = penguins_coefs, col=col)
```

```{r eval=FALSE}
render_gif(penguins_scores, grand_tour(), 
           display_pca(pc_coefs = penguins_coefs, 
                       col=col, axes="bottomleft"), 
           "penguins2d_pca.gif", 
           frames=100, width=300, height=300)
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

<img src="penguins2d_pca.gif" width="100%">
:::



## Projection dimension and displays

```{r eval=FALSE}

render_gif(penguins[,3:6], grand_tour(), 
           display_dist(half_range=1.3), 
           "penguins1d.gif", 
           frames=100, width=400, height=300)
render_gif(penguins[,3:6], grand_tour(), 
           display_density2d(col=col, axes="bottomleft"), 
           "penguins2d_dens.gif", 
           frames=100, width=300, height=300)
```

```{r runthis18, eval=FALSE}
animate_dist(penguins[,3:6], half_range=1.3)
animate_density2d(penguins[,3:6], col=col, axes="bottomleft")
```

::: {.columns}
::: {.column width="50%"}

1D projections displayed as a density

<img src="penguins1d.gif" width="90%">

:::

::: {.column width="50%"}

Density contours overlaid on a scatterplot

<img src="penguins2d_dens.gif" width="80%">

:::
:::


## How do I use tours


- Classification: 
    - to check assumptions of models
    - to examine separations between groups
    - determine variable importance
    - examine boundaries 
    - random forest diagnostics vote matrix
- Dimension reduction
    - go beyond 2 PCs
    - work with much higher dimensional data
    - check for not linear dependencies

##

- Clustering
    - examine shape of clusters
    - separation between clusters
    - compare cluster solution
    - view the dendrogram in data space
- Compositional data
    - shapes and clusters in a simplex

## Creating a new display

## Saving for publication

::: {.column width="45%"}

Method 1, using `gifski` and `tourr::render_gif()`. See lots of code chunks!

```
render_gif(penguins_sub[,2:5], grand_tour(), 
           display_xy(col=col, axes="bottomleft"), 
           "penguins2d.gif", apf=1/5, 
           frames=100, width=300, height=300)
```

:::

::: {.column width="5%"}
:::

::: {.column width="45%"}

Method 2, using plotly (see slide 15 "Understanding the projections" code chunk):

1. Generate each frame, index each frame, a big array
2. Make one big ggplot, with all frames overplotted, and a non-used argument `frame` pointing to your index
3. Pass to `ggplotly` 
4. Save to html using `htmltools::save_html()` 

or the `spinifex` function `play_tour_path()` makes this easier.

:::


## Summary

We can learn a little more about the data if have a tour in the toolbox. It can help us to understand 

- dependencies between multiple variables
- examine shapes, of clusters
- detect outliers


## If you want to read more

- [Visualizing statistical models: Removing the blindfold (2015)](https://onlinelibrary.wiley.com/doi/abs/10.1002/sam.11271)
- [tourr: An R Package for Exploring Multivariate Data with Projections]()


## Acknowledgements

Slides produced using [quarto](https://quarto.org).

Slides available from [https://github.com/dicook/MDAG_2022](https://github.com/dicook/MDAG_2022). 

Viewable at [https://dicook.github.io/MDAG/slides.html)](https://dicook.github.io/MDAG_2022/slides.html)).


